
buildfile 'lalrc/lalrc.forge';
buildfile 'lalr_examples/lalr_examples.forge';
buildfile 'lalr_test/lalr_test.forge';

for _, cc in toolsets('^cc.*') do    
    cc:all {
        cc:StaticLibrary '${lib}/lalr_${platform}_${architecture}' {
            cc:Cxx '${obj}/%1' {
                'ErrorPolicy.cpp',
                'ThreadPool.cpp';
            };

            cc:Cxx '${obj}/%1' {
                'Grammar.cpp',
                'GrammarAction.cpp',
                'GrammarCompiler.cpp',
                'GrammarGenerator.cpp',
                'GrammarParser.cpp',
                'GrammarState.cpp',
                'GrammarSymbol.cpp',
                'GrammarSymbolSet.cpp',
                'GrammarTransition.cpp'
            };

            cc:Cxx '${obj}/%1' {
                'RegexAction.cpp',
                'RegexCharacter.cpp',
                'RegexCompiler.cpp',
                'RegexGenerator.cpp',
                'RegexItem.cpp',
                'RegexNode.cpp',
                'RegexNodeLess.cpp',
                'RegexParser.cpp',
                'RegexState.cpp',
                'RegexStateLess.cpp',
                'RegexSyntaxTree.cpp',
                'RegexToken.cpp',
                'RegexTransition.cpp'
            };
        };
    };
end
